local desktop = arealib.new(1, 1, craftbang.colors.background):sizeBottomRight(1, 2, true)

local tiles = {}
local scroll = 0
local scrollTime = 0

local tileWidth = 10
local tileHeight = 6

local paddingx = 2
local paddingy = 1
local marginx = 2
local marginy = 3

local shortcuts = {
	{ name = "shell", path = "/rom/programs/shell" }
}

local shortcutsPath = '.cb-shortcuts'

--[[
function desktop:genTiles(dir)
	self:clearTiles()

	local pos = 0
	if fs.isDir(dir) then
		local filelist = fs.list(dir)
		for i=1, #filelist do
			local filename = filelist[i]
			local filepath = fs.combine(dir, filename)

			if not filename:sub(1,1) == '.' then
				local x = math.floor(pos / 2) * (tileWidth + paddingx) + marginx + 1
				local y = (pos % 2) * (tileHeight + paddingy) + marginy + 1
				local area = arealib.new(tileWidth, tileHeight, craftbang.colors.tile)
				area:topLeft(x,y)

				area.basex = area.x
				area.name = filename
				area.path = filepath

				table.insert(tiles, area)

				pos = pos + 1
			end
		end
	end
end
]]

function desktop:clearTiles()
	tiles = {}
end

function desktop:addTile(name, action)
	local area = arealib.new(tileWidth, tileHeight, craftbang.colors.panel)
	local x = math.floor(#tiles / 2) * (tileWidth + paddingx) + marginx + 1
	local y = (#tiles % 2) * (tileHeight + paddingy) + marginy + 1
	area:topLeft(x, y)

	area.basex = x
	area.name = name
	area.action = action

	tiles[#tiles + 1] = area
	return area
end

function desktop:loadShortcuts()
	if not fs.exists(shortcutsPath) then
		self:saveShortcuts()
	else
		shortcuts = textutils.unserialize(craftbang.readFile(shortcutsPath)) or shortcuts
	end
end

function desktop:saveShortcuts()
	craftbang.writeFile(shortcutsPath, textutils.serialize(shortcuts))
end

function desktop:genShortcutTiles()
	self:clearTiles()
	for i=1, #shortcuts do
		local v = shortcuts[i]
		local area = self:addTile(v.name, function()
			craftbang.panel:addTask(v.path)
		end)
		area.shortcut = v
		area.shortcutIndex = i
	end
	self:saveShortcuts()
end

function desktop:removeShortcut(tile)
	if not tile.shortcut then return end
	for i=1, #shortcuts do
		if i == tile.shortcutIndex then
			table.remove(shortcuts, i)
			break
		end
	end
	self:genShortcutTiles()
end

local function newShortcutDialog(self)
	craftbang.dialog:textInput('Program?', nil, function(path)
	craftbang.dialog:textInput('Shortcut name?', 15, function(name)
		if not fs.isDir(path) then
			table.insert(shortcuts, {
				name = name,
				path = path
			})
			self:genShortcutTiles()
		else
			local path = string.format('"%s"', path)
			if fs.isDir(path) then
				craftbang.dialog:notice(path.." is a directory.")
			elseif not fs.exists(path) then
				craftbang.dialog:notice(path.." does not exist!")
			end
		end
	end) end)
end

local function editShortcutDialog(self, x, y, tile)
	if tile.shortcut then
		craftbang.dialog:menu(x, y, {"Rename..", "Remove"},
		function (choice)
			if choice == 1 then
				craftbang.dialog:textInput('New name?', 15,
				function (name)
					tile.shortcut.name = name
					self:genShortcutTiles()
				end)
			elseif choice == 2 then
				self:removeShortcut(tile)
				self:genShortcutTiles()
			end
		end)
	end
end

function desktop:clicked(button, x, y)
	if craftbang.panel.activeTask then return end
	if craftbang.dialog.active then return end

	for i=1, #tiles do
		local v = tiles[i]
		if v:contains(x, y) then
			if button == 1 then
				v.action()
			elseif button == 2 then
				editShortcutDialog(self, x, y, v)
			end
			return
		end
	end

	if button == 2 then
		craftbang.dialog:menu(x, y, {
			"Run..";
			"New Shortcut..";
			"";
			"Settings";
			"";
			"Restart";
			"Shutdown";
		},
		function(choice)
			if choice == 1 then
			elseif choice == 2 then
				newShortcutDialog(self)

			elseif choice == 4 then
				-- open settings application

			elseif choice == 6 then
				os.reboot()
			elseif choice == 7 then
				os.shutdown()
			end
		end)
	end
end

function desktop:key(key)
	local key = keys.getName(key)

	if key == 'left' or key == 'up' then
		self:scrolled(-1)
	elseif key == 'right' or key == 'down' then
		self:scrolled(1)
	end
end

function desktop:scrolled(dir)
	local timeDiff = os.clock() - scrollTime
	if timeDiff < 0.1 then
		dir = dir * 3
	elseif timeDiff < 0.2 then
		dir = dir * 2
	end

	local maxScroll = math.ceil(#tiles / 2) * (tileWidth + paddingx) + marginx - term.getSize()

	if maxScroll > 0 then
		temp = scroll + dir
		temp = temp < 0 and 0 or temp > maxScroll and maxScroll or temp

		if temp ~= scroll then
			scroll = temp
			for i=1, #tiles do
				local v = tiles[i]
				v.x = v.basex - scroll
			end
		end
		scrollTime = os.clock()
	end
end

function desktop:draw()
	local time = textutils.formatTime(os.time())
	local name = os.getComputerLabel()
	local id = os.computerID()
	local w,h = term.getSize()

	craftbang.output(time, w - #time, 2, craftbang.colors.panel)
	if name then
		craftbang.output(name..' #'..id, 2, 2)
	end

	for i=1, #tiles do
		local v = tiles[i]
		local _, _, right, bottom = v:bounds()
		v:fill()

		local text = v.name
		if #text > v.width - 2 then
			text = text:sub(1, v.width - 4) .. '..'
		end
		craftbang.output(text, right - #text, bottom - 1, craftbang.colors.tileText)
	end
end

return desktop
