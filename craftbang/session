os.loadAPI('craftbang/lib/arealib')
os.loadAPI('craftbang/lib/redirect')

craftbang = {
	colors = term.isColor() and {
		background = colors.gray;

		panel = colors.lightGray;
		panelText = colors.gray;

		icon = colors.lightGray;

		dialog = colors.lightGray;
		dialogBorder = colors.gray;
		dialogText = colors.gray;
		dialogButton = colors.gray;
		dialogButtonText = colors.lightGray;
	}
	or {
		background = colors.black;

		panel = colors.white;
		panelText = colors.black;

		icon = colors.white;

		dialog = colors.white;
		dialogBorder = colors.black;
		dialogText = colors.black;
		dialogButton = colors.black;
		dialogButtonText = colors.white;
	};
	screen = {};
	running = true;
}

function craftbang.background(color)
	term.setBackgroundColor(color or craftbang.colors.background)
	term.setCursorPos(1,1)
	term.clear()
end

function craftbang.output(text, x, y, color, bg)
	if color then
		term.setTextColor(color)
	end
	if bg then
		term.setBackgroundColor(bg)
	end
	term.setCursorPos(x, y)
	term.write(text)
end

function craftbang.readFile(path)
	local file = fs.open(path,'r')
	if file then
		return file.readAll(), file.close()
	end
	return nil
end

function craftbang.writeFile(path, content, append)
	local file = fs.open(path, append and 'a' or 'w')
	if file then
		return file.write(content), file.close()
	end
	return nil
end

craftbang.panel = dofile('/craftbang/panel')
craftbang.desktop = dofile('/craftbang/desktop')
craftbang.dialog = dofile('/craftbang/dialog')

arealib.add(craftbang.desktop)
arealib.add(craftbang.panel)

local function main()
	craftbang.screen.width, craftbang.screen.height = term.getSize()

	local redraw = true
	local function draw()
		if redraw then
			--craftbang.background()
			term.setCursorBlink(false)
			arealib.draw()
			craftbang.dialog:draw()
		end
		redraw = true
	end

	craftbang.desktop:loadShortcuts()
	craftbang.desktop:genShortcutIcons()

	draw()

	if not os.getComputerLabel() then
		craftbang.dialog:textInput('Give this computer a name?', 20,
		function (newName)
			os.setComputerLabel(newName)
		end)
	end

	if fs.exists('autorun') then
		local files = fs.list('autorun')
		for i=1, #files do
			craftbang.panel:addTask('autorun/'..files[i], files[i], true)
		end
	else
		fs.makeDir('autorun')
	end

	local updateTimer = os.startTimer(1)

	while craftbang.running do
		craftbang.screen.width, craftbang.screen.height = term.getSize()

		draw()
		
		local ev = {os.pullEventRaw()}

		if ev[1] == 'timer' and ev[2] == updateTimer then
			updateTimer = os.startTimer(1)
			craftbang.desktop:saveShortcuts()
		end

		craftbang.panel:events(unpack(ev))
		if not craftbang.panel.activeTask then
			if ev[1] == 'terminate' then
				break
			end

			if craftbang.dialog.active then
				craftbang.dialog:events(unpack(ev))
			else
				if ev[1] == 'mouse_click' then
					arealib.clicked(ev[2], ev[3], ev[4])
				elseif ev[1] == 'mouse_drag' then
					arealib.dragged(ev[2], ev[3], ev[4])
				elseif ev[1] == 'mouse_scroll' then
					arealib.scrolled(ev[2], ev[3], ev[4])
				elseif ev[1] == 'key' then
					craftbang.desktop:key(ev[2])
				end
			end
		else
			local panel = craftbang.panel
			if ev[1] == 'mouse_click' then
				if panel:contains(ev[3], ev[4]) then
					panel:clicked(ev[2], ev[3], ev[4])
				end
			end
		end
	end
end

--goroutine2.run(main)
local ok, err = pcall(main)

craftbang.background(colors.black)
if not ok then
	term.setTextColor(colors.white)
	print "Whoops! CraftBang seems to have crashed..."
	printError(err)
	print "Press any key to restart."
	repeat
		local event = os.pullEvent()
	until event == 'key' or event == 'mouse_click'
	os.reboot()
end

--os.shutdown()